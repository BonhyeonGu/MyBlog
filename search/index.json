[{"content":"서론 개요 라우팅, 방화벽, NAT 등의 조건이 걸린 Gateway를 경우에 따라서 다른 망의 호스트로 부터 접근하고 싶은 경우가 있습니다.\n클라이언트가 속한 망이 본인 권한이 아닐 경우 VPN을 Gateway에 설치하는 것이 이상적인 솔루션입니다.\n물론 이것이 클라이언트가 속한 망의 정책에 위반되지 않는지 검토되어야 하며,\n라우팅은 네트워크 계층을, VPN은 네트워크와 전송 계층의 사이에 존재하는 서비스이기 때문에,\n정작 실제 망에 문제가 생기면 VPN 설정과 무관하게 됨을 이해해야 합니다.\nVPN의 UDP? TCP? VPN도 네트워크 서비스인 만큼, 두 네트워크 프로토콜중에 하나를 골라야 합니다.\n하지만 궁금증이 생길 수 있습니다. 만약 UDP로 VPN을 연결하면 TCP서비스를 사용하지 못하는가?\n답은 \u0026lsquo;그렇지 않다.\u0026rsquo; 입니다. VPN에서 선택하는 프로토콜은 VPN 터널에서 사용할 패킷을 어떻게 전달하느냐 입니다.\n이 위에 올라갈 서비스와는 다른 것입니다.\n하지만 이것은 신중히 선택되어야 합니다. 만약 VPN을 UDP로 설정한다면, 서비스가 TCP를 사용한들\nTCP 본연의 신뢰성을 잃거나, 서비스의 handshake를 VPN의 UDP가 손실시켜 본래의 속도보다 더 느릴 수 있습니다.\n이번 예에서는 VPN을 UDP로 설정합니다. 해당 경우로 얻길 원하는 이점은 VPN으로 소요되는 시간을 최소화 하는 것입니다.\n설치 설명되는 과정은 Ubunut 22.04 LTS 기준입니다. 기본 게이트웨이의 설정\n1 net.ipv4.ip_forward=1 과 같은 것은 마무리 되었다고 가정합니다.\n인증서 인증서를 만들어줄 패키지를 설치하고, 인증서 설정이 포함된 디렉토리를 생성,\n그 후 인증서 메타데이터를 수정합니다.\n1 2 3 4 5 sudo apt-get update sudo apt-get install easy-rsa openvpn make-cadir ~/openvpn-ca cd ~/openvpn-ca nano vars vars의 내용물은 대부분 주석으로 처리되어 있는 내용일 경우 필자와 동일한 Easy-RAS 3.x 환경입니다. 만약 export 등의 키워드가 붙어있다면 2.x 임으로 다른 문서를 확인해주세요\n저는 다음과 같이 정의하겠습니다.\n1 2 3 4 5 6 set_var EASYRSA_REQ_COUNTRY \u0026#34;KR\u0026#34; set_var EASYRSA_REQ_PROVINCE \u0026#34;Busan\u0026#34; set_var EASYRSA_REQ_CITY \u0026#34;Busan\u0026#34; set_var EASYRSA_REQ_ORG \u0026#34;Oklab\u0026#34; set_var EASYRSA_REQ_EMAIL \u0026#34;bonhyeon.gu@9bon.org\u0026#34; set_var EASYRSA_REQ_OU \u0026#34;graduate\u0026#34; 이후 필요한 파일을 출력하겠습니다. 인증, 인증서, 키, 서명등의 이론적 설명은 다음에 포스팅에 하도록 하겠습니다.\n클라이언트 이름을 h100으로 하는 예제입니다.\n공개키 인프라 초기화\n1 ./easyrsa init-pki CA인증서 및 키 생성\n1 ./easyrsa build-ca nopass 서버의 인증서 요청(CSR) 및 개인 키 생성\n1 ./easyrsa gen-req server nopass 서버 CSR에 서명하여 서버 인증서 생성\n1 ./easyrsa sign-req server server 클라이언트의 인증서 요청(CSR) 및 개인 키 생성\n1 ./easyrsa gen-req h100 nopass 클라이언트 CSR에 서명하여 클라이언트 인증서 생성\n1 ./easyrsa sign-req client h100 DH 파라미터 생성\n1 ./easyrsa gen-dh CRL(인증서 폐지 목록) 생성\n1 ./easyrsa gen-crl 작업의 편리함을 위하여 생성된 파일을 openvpn 디렉토리에 복사하도록 하겠습니다.\n1 2 3 4 5 sudo cp ./pki/ca.crt /etc/openvpn/server/ sudo cp ./pki/issued/server.crt /etc/openvpn/server/ sudo cp ./pki/private/server.key /etc/openvpn/server/ sudo cp ./pki/dh.pem /etc/openvpn/server/ sudo cp ./pki/crl.pem /etc/openvpn/server/ OpenVPN 서버 설정 MitM(중간자공격)을 방지하기 위해 TLS-Auth를 설정할 수 있습니다. 이를 위해서는 추가적인 키 생성이 필요합니다.\n1 2 cd /etc/openvpn/server/ openvpn --genkey --secret ta.key 다음으로 /etc/openvpn/server.conf 를 생성합니다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 port 1194 proto udp dev tun ca server/ca.crt cert server/server.crt key server/server.key dh server/dh.pem server 10.8.0.0 255.255.255.0 ifconfig-pool-persist ipp.txt push \u0026#34;redirect-gateway def1 bypass-dhcp\u0026#34; push \u0026#34;dhcp-option DNS 8.8.8.8\u0026#34; push \u0026#34;dhcp-option DNS 8.8.4.4\u0026#34; keepalive 10 120 tls-auth server/ta.key 0 cipher AES-256-CBC auth SHA256 compress lz4-v2 push \u0026#34;compress lz4-v2\u0026#34; user nobody group nogroup persist-key persist-tun status openvpn-status.log verb 3 crl-verify server/crl.pem client-config-dir /etc/openvpn/ccd 다음으로 /etc/openvpn/ccd/ 디렉토리를 만들고 /etc/openvpn/ccd/h100 를 생성합니다. 이 작업은\n클라이언트의 정보를 지정하는 것입니다. h100이라는 이름도 클라이언트 인증서의 CN을 따라갑니다.\n앞에서 ./easyrsa gen-req h100 nopass 의 명령과 관련이 있습니다.\n해당 파일에는 다음과 같은 고정 아이피 주소와 같은 내용을 넣을 수 있습니다.\n1 ifconfig-push 10.8.0.2 255.255.255.0 이제 재시작 하여 설정을 적용시켜야 합니다.\n1 2 sudo systemctl start openvpn@server sudo systemctl enable openvpn@server 클라이언트 설정 지금부터는 클라이언트(H100)의 설정입니다. 클라이언트에도 패키지를 설치해 줍니다.\n1 2 sudo apt-get update sudo apt-get install openvpn 다음으로 /etc/openvpn/client/ 에 앞에서 만들었던 해당 파일을 옮겨주어야 합니다.\n당연히 인증서와 키를 옮기는 과정은 주의가 필요합니다.\nca.crt h100.crt h100.key ta.key 그 후 다음 설정파일을 /etc/openvpn/client.conf 에 작성하겠습니다.\nvpn.server.com 은 VPN 서버의 주소가 들어가야 합니다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 client dev tun proto udp remote vpn.server.com 1194 resolv-retry infinite nobind user nobody group nogroup persist-key persist-tun ca /etc/openvpn/client/ca.crt cert /etc/openvpn/client/h100.crt key /etc/openvpn/client/h100.key tls-auth /etc/openvpn/client/ta.key 1 cipher AES-256-CBC auth SHA256 verb 3 마지막으로 다음의 명령어로 설정 변경을 적용시킵니다.\n1 sudo systemctl restart openvpn@client 그 후 ifconfig 그리고 ping 등으로 부여된 주소 및 연결을 확인할 수 있습니다.\nNAT 설정 참고 만약 Gateway에서 VPN 연결 대상으로 넘겨주기 위해서는 게이트웨이에 다음과 같은 예를 사용할 수 있습니다.\n1 2 sudo iptables -t nat -A PREROUTING -p tcp --dport [외부에서 들어올 포트번호] -j DNAT --to-destination [VPN주소]:22 sudo iptables -A FORWARD -p tcp -d [VPN주소] --dport [외부에서 들어올 포트번호] -j ACCEPT ","date":"2023-05-15T17:22:49+09:00","image":"https://docs.9bon.org/p/gateway%EC%97%90-openvpn-%EC%84%A4%EC%B9%98/thum_hu5a0a7b44549fccb70eb622685b43408e_102490_120x120_fill_box_smart1_3.png","permalink":"https://docs.9bon.org/p/gateway%EC%97%90-openvpn-%EC%84%A4%EC%B9%98/","title":"Gateway에 OpenVPN 설치"},{"content":"서론 윈도우는 파일 이름에서 대문자, 소문자를 구별하지 않습니다.\n당연히 프로그래밍 언어, 라이브리를 사용할 때에도 마찬가지입니다.\n정확히는 NTFS와 같은 윈도우 파일시스템은 대소문자를 구별하지만 OS에서 허용하지 않게 되어있습니다.\n따라서 자신의 프로그램을 위해 아래의 명령어를 고려할 수 있습니다.\nCMD 1 2 fsutil file setCaseSensitiveInfo \u0026lt;경로\u0026gt; enable fsutil file setCaseSensitiveInfo \u0026lt;경로\u0026gt; disable ","date":"2023-01-10T17:42:59+09:00","image":"https://docs.9bon.org/p/%EC%9C%88%EB%8F%84%EC%9A%B0-%EB%8C%80%EC%86%8C%EB%AC%B8%EC%9E%90-%ED%8C%8C%EC%9D%BC-%EC%9D%B4%EB%A6%84-%EA%B5%AC%EB%B3%84/thum_hub202236e3ad57bda0b1f4ae1ba5b8a23_590280_120x120_fill_box_smart1_3.png","permalink":"https://docs.9bon.org/p/%EC%9C%88%EB%8F%84%EC%9A%B0-%EB%8C%80%EC%86%8C%EB%AC%B8%EC%9E%90-%ED%8C%8C%EC%9D%BC-%EC%9D%B4%EB%A6%84-%EA%B5%AC%EB%B3%84/","title":"윈도우 대소문자 파일 이름 구별"},{"content":"서론 개요 쿠버플로우, 큐베플로우, 쿠브플로우.. 이것을 배포해야 하는 일이 있었습니다.\n하지만 추가 패키지를 이용하지 않고 K8s로 직접 설치하는 자료는 적었으며 따라해도 오류가 발생했습니다.\n그도 그럴것이 쿠버플로우는 계속해서 업데이트가 되고 있으며, 운영체제, 쿠버네티스, 도커를 포함한 여러 패키지의 업데이트에도 민감하기 때문에 문제가 계속 생기는 것 같습니다.\n이번 포스트에선 쿠버플로우에 대한 설명을 따로 하진 않을 것이며,\nClone이 가능한 가상머신을 기준, GPU가 없는 것을 예제로 설명해 보도록 하겠습니다.\n해당 포스트를 이해하셨다면 서버에 직접 설치하는건 문제 없을거라 예상합니다.\n고려사항 다음은 이유는 파악 못했으나, 문제 원인을 찾아낸 것들의 내용입니다. 2022-12 기준입니다.\n우분투 22.04 환경 쿠버네티스 설치에서 인증 메니저 노드가 설치 안되는 것을 확인했습니다. 20.04는 문제가 없었습니다. Readme에서는 쿠버플로우 1.20 이상 버전을 권장했으나 1.21.5-00 버전이 아니면 설치 문제가 발생했습니다. 마스터, 워커노드 모두 사양을 크게 잡아먹었습니다. 각 노드 모두 16GB이상의 메모리가 아니면 문제가 생겼습니다. 종종 kubeflow manifests의Install with a single command 방법이 종료되지 않는 문제를 겪었습니다. 설치 config등을 수정, 추가하는 부분은 위와 아래의 글을 참고해주세요\n공통 사전 설치 1 2 3 4 5 6 7 8 9 10 11 12 13 14 sudo apt-get update sudo apt-get install \\ ca-certificates \\ curl \\ gnupg \\ lsb-release curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg echo \\ \u0026#34;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) stable\u0026#34; | sudo tee /etc/apt/sources.list.d/docker.list \u0026gt; /dev/null sudo apt-get update sudo apt-get install docker-ce docker-ce-cli containerd.io sudo curl -L \u0026#34;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\u0026#34; -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose 도커, 도커 컴포즈를 설치합니다. 버전이 문제가 없다면 다른 방식으로 설치해도 무방할 것 같습니다.\nsu\u0026ndash;\n1 2 3 4 5 6 7 8 9 10 11 12 13 cat \u0026gt; /etc/docker/daemon.json \u0026lt;\u0026lt;EOF { \u0026#34;exec-opts\u0026#34;: [\u0026#34;native.cgroupdriver=systemd\u0026#34;], \u0026#34;log-driver\u0026#34;: \u0026#34;json-file\u0026#34;, \u0026#34;log-opts\u0026#34;: { \u0026#34;max-size\u0026#34;: \u0026#34;100m\u0026#34; }, \u0026#34;storage-driver\u0026#34;: \u0026#34;overlay2\u0026#34;, \u0026#34;storage-opts\u0026#34;: [ \u0026#34;overlay2.override_kernel_check=true\u0026#34; ] } EOF suend\u0026ndash;\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 sudo mkdir -p /etc/systemd/system/docker.service.d sudo systemctl daemon-reload sudo usermod -aG docker ${USER} newgrp docker sudo chmod 666 /var/run/docker.sock sudo systemctl restart docker sudo systemctl daemon-reload sudo systemctl enable docker curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add sudo apt-add-repository \u0026#34;deb http://apt.kubernetes.io/ kubernetes-xenial main\u0026#34; sudo apt-get install -y kubelet=1.21.5-00 kubeadm=1.21.5-00 kubectl=1.21.5-00 --allow-downgrades --allow-change-held-packages sudo apt-mark hold kubelet kubeadm kubectl 도커 권한 설정을 하고 쿠버네티스를 설치합니다.\nsu\u0026ndash;\n1 2 3 4 cat \u0026lt;\u0026lt;EOF \u0026gt; /etc/sysctl.d/k8s.conf net.bridge.bridge-nf-call-ip6tables = 1 net.bridge.bridge-nf-call-iptables = 1 EOF suend\u0026ndash;\n1 2 3 sudo sysctl --system sudo systemctl daemon-reload sudo systemctl restart kubelet 이 이후로는 해당 가상 머신을 Clone 1회 또는 2회하여 마스터 노드와 워커노드로 나눕니다.\n호스트 네임과 아이피 주소에 주의하세요, 호스트 네임같은 동일할 경우 문제가 발생합니다.\n마스터 노드 설치-조인 전 1 2 3 4 5 6 7 sudo kubeadm init mkdir -p $HOME/.kube sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config sudo chown $(id -u):$(id -g) $HOME/.kube/config kubectl taint nodes --all node-role.kubernetes.io/master- kubectl create -f https://raw.githubusercontent.com/cilium/cilium/v1.6/install/kubernetes/quick-install.yaml kubectl get pods -n kube-system --selector=k8s-app=cilium 쿠버네티스를 초기화합니다. 이후 출력되는 명령어를 이용하여 워커노드를 조인 시킵니다. (sudo)\n마스터 노드 설치-조인 후 1 2 3 4 5 6 kubectl apply -f https://raw.githubusercontent.com/rancher/local-path-provisioner/master/deploy/local-path-storage.yaml sudo apt install nfs-common sudo apt install nfs-kernel-server sudo mkdir /nfsroot sudo chown nobody:nogroup /nfsroot sudo chmod 777 /nfsroot 해당 과정은 NFS Client Provisioner를쿠버네티스가 사용할 수 있게 구축하고\n사용할 NFS Server도 마스터 노드에 올리는 과정을 설명하고 있습니다.\nsudo nano /etc/exports 로 아래 내용 추가\n1 2 /nfsroot 192.168.80.110(rw,insecure,sync,no_root_squash,no_subtree_check) /nfsroot 192.168.80.111(rw,insecure,sync,no_root_squash,no_subtree_check) 해당 과정을 통하여, 존재하는 모든 노드에 NFS 공간을 할당하고 있습니다.\n쿠버플로우에서 NFS는 의무가 아니지만 없을경우 가변적으로, 쿠버플로우가 볼륨을 잡기 때문에\n비추천 하고 있습니다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 sudo service nfs-kernel-server restart sudo systemctl enable rpcbind sudo systemctl enable nfs-server sudo systemctl start rpcbind sudo systemctl start nfs-server sudo exportfs -a curl https://raw.githubusercontent.com/helm/helm/release-2.16/scripts/get \u0026gt; get_helm.sh chmod 700 get_helm.sh ./get_helm.sh helm repo add raphael https://raphaelmonrouzeau.github.io/charts/repository/ helm repo update helm install nfs-provisioner \\ --set nfs.server=192.168.80.110 \\ --set nfs.path=/nfsroot \\ --set storageClass.defaultClass=true \\ --set storageClass.name=nfs-provisioner \\ raphael/nfs-server-provisioner kubectl apply -f https://raw.githubusercontent.com/mojokb/handson-kubeflow/master/registry/kubeflow-registry-deploy.yaml kubectl apply -f https://raw.githubusercontent.com/mojokb/handson-kubeflow/master/registry/kubeflow-registry-svc.yaml 아이피 주소 192.168.80.110, 192.168.80.111은 각각 마스터, 워커의 주소입니다. 환경에 맞춰서 사용해 주셔야 합니다.\n쿠버플로우의 경우 nfs를 사용하지 않을 시 가변용량 저장소를 이용하기 때문에 사양문제가 발생한다고 합니다.\n마스터, 워커 공통 설치 진행 /etc/docker/daemon.json에 추가\n1 2 3 \u0026#34;insecure-registries\u0026#34;: [ \u0026#34;kubeflow-registry.default.svc.cluster.local:30000\u0026#34; ] 그리고 재시작합니다.\n1 sudo systemctl restart docker /etc/hosts에 추가(이 부분은 미리 추가해도 됨)\n1 192.168.80.110 kubeflow-registry.default.svc.cluster.local 워커노드에서 nfs 확인 1 curl kubeflow-registry.default.svc.cluster.local:30000/v2/_catalog 마스터 노드에서의 쿠버플로우 설치 1 2 3 4 5 6 7 8 wget https://github.com/kubernetes-sigs/kustomize/releases/download/v3.2.0/kustomize_3.2.0_linux_amd64 mv kustomize_3.2.0_linux_amd64 kustomize chmod 777 kustomize sudo mv kustomize /usr/local/bin git clone https://github.com/kubeflow/manifests.git cd manifests while ! kustomize build example | kubectl apply -f -; do echo \u0026#34;Retrying to apply resources\u0026#34;; sleep 10; done 후에\n1 kubectl port-forward svc/istio-ingressgateway -n istio-system 8080:80 로 user@example.com/12341234을 사용하여 로컬상의 테스트가 가능합니다.\n또는\n1 kubectl port-forward --address 0.0.0.0 svc/istio-ingressgateway -n istio-system 8080:80 로 외부노출을 허용시킬 수 있습니다.\n참고 자료들 만약에 정상작동하지 않을 경우 아래의 자료를 확인해주세요.\n설치법 https://github.com/kubeflow/manifests\nhttps://learning-sarah.tistory.com/entry/Kubeflow-13-%EC%84%A4%EC%B9%98\nhttps://jwher.github.io/posts/install-kubeflow/\nhttps://lsjsj92.tistory.com/580\nhttps://yooloo.tistory.com/229\nhttps://velog.io/@ehddnr/kubernetes-kubeflow-%EC%84%A4%EC%B9%98-feat.-GCP\nhttps://losskatsu.github.io/it-infra/mlops01/#\nhttps://velog.io/@csk6124/Kubeflow-1.4-%EC%84%A4%EC%B9%98\nhttps://velog.io/@dev_halo/%EC%95%84%EB%AC%B4%EB%8F%84-%EC%95%88%EC%95%8C%EB%A0%A4%EC%A3%BC%EB%8A%94-on-premise-Kubeflow-%EA%B5%AC%EC%B6%95%ED%95%B4%EB%B3%B4%EC%9E%90\n트러블 슈팅 https://hackmd.io/@maelvls/debug-cert-manager-webhook\nhttps://github.com/calebhailey/homelab/issues/3#issuecomment-569543391\nhttps://github.com/kubeflow/manifests/issues/2086\nhttps://mlops-for-all.github.io/docs/setup-components/install-components-kf/\n","date":"2022-10-20T04:46:35+09:00","image":"https://docs.9bon.org/p/%EC%BF%A0%EB%B2%84%ED%94%8C%EB%A1%9C%EC%9A%B0-%EC%84%A4%EC%B9%98/thum_hua73f32689426d4b33249e781ef385a89_69335_120x120_fill_box_smart1_3.png","permalink":"https://docs.9bon.org/p/%EC%BF%A0%EB%B2%84%ED%94%8C%EB%A1%9C%EC%9A%B0-%EC%84%A4%EC%B9%98/","title":"쿠버플로우 설치"},{"content":"서론 컴퓨터 \u0026lsquo;과학\u0026rsquo; 저만 그렇게 생각했었는지 모르겠으나 컴퓨터 과학이라는 단어가 어렵게 느껴졌습니다.\n과학을 잘 다루는 공학은 컴퓨터와 매우 어울리는 단어일 것입니다. 알고리즘이 컴퓨터 공학중 하나라고 말해도 저는 어색함을 느끼지 못할 것 같습니다. 하지만 알고리즘은 컴퓨터 과학, 컴퓨터 수학이라는 단어를 자주 사용합니다. 왜 그런지 여러분들은 아시나요?\n개요 P-NP 문제는 컴퓨터를 전공하지 않는 분들이라도 한번쯤은 들어봤을지도 모르는 문제라고 생각합니다. 해당 문제는 딱히 전문지식이 없어도 충분히 이해하실 수 있습니다. 이번에는 해당 난제를 이해하기 위한 개념들과, 최종적으로 해당 문제를 알아보도록 하겠습니다.\n부분개념 해설 다차(다항식) 알고리즘 전공생들이면 다들 알다시피 알고리즘은 여러 복잡도 표기법을 통하여 나타낼 수 있으며 가장 많이 쓰는 것은 빅 오 입니다.\n최악의 경우를 고려하는 것은 어쩌면 알고리즘에 당연한 것이 아닌가 싶습니다.\n다차 알고리즘은 O ( p(n) ) 일 때 p(n)이 다차 함수인 경우입니다. 예를 들어 O ( 2^n ) 은 다차함수가 아닙니다.\n이 개념을 요약하여 다차시간에 풀 수 있다. 없다. 로 부르기도 합니다.\nInstractable (아주 다루기 힘든) 문제 다차 알고리즘을 찾을 수 없는 문제를 뜻합니다. 풀어서 설명하면\n다차로 풀리지 않는 경우가 하나라도 있거나 풀 수 없다고 증명된 문제를 뜻하며, 더 풀어서 설명하면 쉬운 방법으로 풀 수 없는 문제를 뜻합니다.\nInstractable 로 증명된 문제 현실에 존재하는 알고리즘 문제는 Instractable 개념을 사용하여 3가지로 나누어 볼 수 있습니다.\n다차시간 알고리즘이 존재하는 문제 [ ex : 정렬 O(n lg n), 정렬된 배열 검색 O(lg n), 행렬곱셈 O(n^2.38) ] Instractable 이 증명된, 어려운 방법으로만 풀 수 있는 문제 [ ex : 모든 해밀토리안 회로 결정하기 O((n-1)!)) , 종료문제(불가능) ] 다차시간 알고리즘을 찾지 못했으나 Instractable이 증명되지 않은 문제 [ ex : 0-1 배낭 채우기, 외판원, M-색칠, 해밀토리안 회로] 모든 알고리즘 문제에서 2번은 아주 적은 비율을, 3번은 가장 많은 비율을 차지합니다. 이번 난제에서는 3번에 초점이 잡혀 있습니다.\n딱 봐도 3번의 경우가 가장 골치아플 것입니다.\n결정 문제, 최적화 문제란? 위와 잠깐 다른 방법으로 다시 알고리즘 문제를 나누어 볼 것입니다. 이것은 쉬운 개념입니다.\n결정 문제는 다음과 같습니다. 제 손에 학생들의 키가 작성되어 있는 자료가 있습니다. 그러곤 문제가 나왔습니다. 가장 키가 큰 학생은 구본현인가?\n이것의 정답은 참 아니면 거짓일 것입니다.\n최적화 문제로 예를들어보면 다음 문제가 있습니다. 학생들 중에 키가 가장 큰 학생이 누구인가?\n또는 키가 1, 2, 3등으로 큰 학생들을 나열하라\n어떤 차이가 있는지 아시겠나요? 최적화 문제의 예로는 외판원 문제, 0-1 배낭 채우기 문제등이 있습니다.\n참고로 이 두 문제는 최소값, 최대값 원하는게 서로 다릅니다. 하지만 이것은 상관 없습니다.\n결정 문제, 최적화 문제의 관계 핵심 관계는 이렇습니다. 어떤 문제가 최적화 문제이고 다차 알고리즘이 존재한다면 이 문제의 결정문제 알고리즘도 반드시 다차 알고리즘이 존재합니다.\n예를 들어 학생 키의 1, 2, 3등을 정의할 수 있고 이것이 빠른 속도로 풀린다면, 가장 키가 큰 학생이 구본현인지 알아내는 것도 빠르다는 것입니다.\n이것은 당연한 말이기도 합니다. 만약 모든 문제가 마찬가지인지 의심이 되신다면, 위의 관계는 이미 식으로 증명이 되어있습니다.\n조금 더 생각하고 지나가면, 최적화 문제에서 결정 문제로 넘어가는 것은 위의 예제처럼 쉬울 것입니다.\n하지만 거꾸로 결정 문제에서 최적화 문제로 넘어가는것은 쉽지 않습니다. a가 가장 키가 큰가? b가 가장 키가 큰가? 라는 방법으로\n모든 학생들의 키를 점검하는 방법론인데 해당 결정문제가 약간이라도 복잡한 형태라면 느릴 것입니다.\n이를 제대로 이해하셨다면 \u0026ldquo;왜 당연한 말을 길게하지?\u0026rdquo; 라고 생각하실 수 있다고 생각합니다.\n비결정적 알고리즘 좋습니다. 이것 또한 복잡한 개념은 아니라고 생각합니다. 복잡하기보다 우리가 알고있는 알고리즘과 달리 이상한? 말이 될 것입니다.\n책에 나올듯한 딱딱한 설명으로는 다음과 같습니다.\n추측 단계에서 비 결정적으로 답을 추측하고, 그 답을 결정적인 검증을 통하여 옳바른 답을 찾는 알고리즘.\n이것을 이해할 때는 위에서 말한 결정문제에서 최적화 문제로 가는 예를 생각하면서 보시면 편리할 것입니다.\n가방 채우기 문제를 예로 들어보겠습니다. 여러분은 여러 물건이 있고 각 물건은 무게와 값어치라는 속성이 있습니다.\n가방에 최대로 넣을 수 있는 무게는 정해져 있습니다. 여러분은 최대한 값어치 있게 가방에 넣는것이 목표입니다.\n이것은 아주 유명한 문제입니다. Branch and Bound 알고리즘등으로 해결할 수 있습니다. 하지만 비결정적 알고리즘으로 풀어볼까요?\n먼저 랜덤으로 물건을 선택합니다.. 그리고 물건의 무게가 정해진 무게보다 높으면 처음으로 되돌아 갑니다.\n만약 선택한 물건이 정해진 무게보다 이하라면 물어봅니다. 이것이 최대의 값어치인가요? 이 물음이 참이면 답으로 결정됩니다.\n이와같이 각 분기를 모두 꺼내보고 검증을 통하여 답의 참, 거짓을 판단하는 알고리즘을 비결정적 알고리즘이라고 명칭합니다.\n이때 중요한 것이, 검증은 해당 결정문제의 다차시간 알고리즘의 존재 유무 관련 없이 다차시간 알고리즘이 존재할 수 있습니다.\nP-NP 문제 P와 NP 드디어 주제입니다. 위에 알아본 개념을 사용해서 정의를 살펴보겠습니다.\n먼저 NP는 다차시간 비 결정적 알고리즘으로 풀 수 있는 결정 문제입니다.\n처음 접하시는 분들도 이해할 수 있도록 풀어서 알아보면, 그 어떠한 방법을 써서든, 느리든 말든 다차 알고리즘으로 풀 수 있는 결정문제 입니다.\nP는 다차시간 알고리즘이 존재하는 결정문제입니다. 마찬가지로 풀어서 이해해보면 우리가 이해할 수 있는 쉬운 방법으로 풀 수 있는 결정문제입니다.\n햇갈리신다면 위의 글을 참고하여 검증이 빠른것과 문제가 빠른것이 다른 이야기라는 것을 참고하시면 좋겠습니다.\nP에 속하는 문제는 NP일 것이며, NP에 조차 속하지 않는 것이 Instractable 문제입니다.\n다항식 시간내로 문제 변환가능 기호로는 a ∝ b라고 표시합니다.\n뜻은 문제 b가 다차 시간에 풀리며, 문제 a에서 문제 b로 다차시간내 변환이 가능하다면 문제 b도 다차시간 내로 풀 수 있습니다.\n이것도 식으로 증명된 것입니다. 하지만 문제 변환이 무엇인지 짚고 넘어가 볼까요? 예로 두 문제를 꺼내보겠습니다.\nPartition 문제 : 집합 하나를 겹치는 원소가 없이 합이 같게 두 배열로 쪼개라 Subset 문제 : 집합 안에 합이 n이 나오는 부분집합이 존재하는가? 각각 최적화 문제, 결정 문제라는 것을 이해 하셨을 것이라 생각합니다. 서로 문제간 아래와 같이 변환 가능합니다.\n보면 변환하는 식도 다차방정식입니다. 즉 증명에 따라 Partition문제의 복잡도를 알 수 없어도 Subset문제가 다차시간으로 풀리기 때문에\nPartition 문제 해법도 다차 알고리즘 입니다.\nNP 완전 P-NP 문제가 흥미로운 이유입니다. 만약 어떤 결정문제 A가 NP이고 모든 NP 문제들이 A로 변환이 가능할 때 이 문제 A를 NP난해라고 명칭합니다.\n또한 NP난해이면서 NP인 문제들을 NP완전이라고 부릅니다.\nNP완전인 문제는 굉장히 많습니다. 앞에서 나온 SAT, Circuit, 0-1 배낭채우기, Partition, Graphe Caloring, Subset Sum 들도 다 NP완전 문제입니다.\n즉 지금까지의 정리들을 사용하면 세상 모든 NP문제들은 방금 예제와 동일한 난이도를 가지고 있습니다.\nNP 완전의 정리는 복잡합니다. 관심이 있으시다면 Cook Levin theorem를 검색하시면 좋겠습니다.\n그래서 P-NP가 뭔데? 정리 a∝b 일때 b가 P이면 a도 P이다. 문제 c가 NP이고 문제 b가 NP-완전이고 b∝c이면 c도 NP-완전이다. 이것이 법칙이며 추가 내용으로는 NP 문제들이 모두 NP완전에 속하는 아주 간단한 문제와 같은 복잡도로 풀 수 있다는 것입니다.\n이 P-NP 문제의 핵심은 이런 NP와 P의 관계에 초점이 잡혀있습니다. 아직 누구도 P와 NP의 연관관계를 찾지 못했습니다. 만약에 P=NP라고 가정해볼까요? 그럼 위에서 나온 NP완전의 개념을 똑같이 P완전으로 치환해서 읽어보면\n이 세상 모든 문제는 간단한, 다항식 시간으로 풀릴 수 있다가 됩니다.\nP-NP문제는 P=NP 이냐, P≠NP이냐를 증명하는 문제입니다.\n더 풀어서 말해보면, 세상의 모든 문제가 쉬운 방법으로 풀 수 있는지,\n그렇게 못하는 어려운 문제라는 것이 존재하는 것인지,\n아니면 이를 증명하는 것이 불가능한지 에 대한 난제입니다.\n마치며 실은 PS문제를 풀어보신 분들이면 P=NP가 허무맹랑한 소리처럼 들리실 수 있습니다. 이렇게 고생을 해야 풀리는 문제들이\n실은 특정 복잡도를 넘지 않게 풀 수 있다니, 지금까지 석박사들이 고안한 훌륭한 알고리즘보다 더 빠른 알고리즘이 있다니?\n공상과학 영화에 나올 주제일지도 모르겠습니다.\n아마도 문제는 이게 다를 것 같지만, 다르다는 증명이 성공하지 못했다는 것일거라 생각합니다. 지금도 많은 논문들이 해당 주제로\n제출이 되지만 그렇다한 성과가 없습니다.\n이 글이 컴퓨터 학문, 공학적인 면모 이면을 보실 수 있는 계기가 되셨길 바랍니다. 고생하셨습니다.\n","date":"2022-07-22T13:24:09+09:00","image":"https://docs.9bon.org/p/p-np-%EB%AC%B8%EC%A0%9C/thum_hua2a635ad640edd151ecba844414d8b86_406098_120x120_fill_box_smart1_3.png","permalink":"https://docs.9bon.org/p/p-np-%EB%AC%B8%EC%A0%9C/","title":"P-NP 문제"},{"content":"서론 개요 DHCP를 리눅스에서 구성하는 것은 어렵지 않습니다. 두개 정도되는 설정파일을 수정하는 것 만으로 구성할 수 있습니다.\n문제는 DNS입니다. 만약 클라이언트 측의 IP Address가 동적으로 변한다면 DNS도 이에 따라 변해야 할 것입니다.\n이렇게 정보가 바뀔 때 마다 DNS에 자동으로 갱신 시킬 수 있는 서비스를 DynamicDNS라고 부릅니다.\n이번 작업을 하기전에 앞의 작업이 정말 이상이 없었는지 확인해 보시는걸 추천드립니다.\n당연히 이런건 말을 하지 않아도 앞으로 해주는 것이 좋습니다. 또한 이 과정에 없더라도 어떤 단순 명령이 동작하지 않으면\n앞의 과정을 기반으로 충분히 해내실 수 있어 적지 않은 것이니 찾아보시길 권장드립니다.\n(ex\u0026gt;Server02에서 ping client01.busan.com이 안되는데?)\n토폴로지 준비작업 클라이언트 추가 먼저 클라이언트를 하나 더 추가해 놓겠습니다. 기존에 있는 클라이언트를 clone 하셔서 만들어 주시면 됩니다.\n단 hostname 기준으로 만들어 놓을 것이기 때문에 두 클라이언트의 hostname은 달라야 합니다.\nhostname은 /etc/hostname 수정 후 재부팅으로 변경할 수 있습니다.\nBIND9 정적 정보 삭제 이번 구현을 완료하면 [hostname].busan.com 과 같이 호스트네임과 변경되는 IP Address에 따라 자동으로 정보가 생성될 것입니다.\n따라서 앞에서 만들어 놓은 client01 부분은 모두 삭제하겠습니다.\n필요 패키지 설치 1 2 apt-get update apt-get install isc-dhcp-server bind9-utils 먼저 앞으로 필요한 데몬을 설치하겠습니다. 해당 데몬들은 이름에서 유추할 수 있는 기능 그대로를 제공합니다.\nBIND9 설정 개요 BIND9는 DHCP보다 설정할 것이 적습니다. 해당 과정은 앞으로의 BIND9 설정에도 유용하게 쓰일 개념들이 많으니 참고해서 진행하시면 좋겠습니다.\n설명 이 곳을 수정합니다. 도메인의 상세 설정을 하는 곳입니다.\n1 nano /etc/bind/named.conf.local 아래 내용을 추가합니다.\n1 2 3 4 include \u0026#34;/etc/bind/rndc.key\u0026#34;; controls { inet 192.168.10.3 allow { 192.168.10.3; } keys { rndc-key; }; }; rndc.key라는 단어가 나왔습니다. 해당 암호화키는 DHCP와 BIND9가 서로 약속된 사이가 맞다는 것을 증명합니다.\n만약 없거나, 새로운 rndc.key를 발급하고 싶다면 rndc-confgen를 사용하여 생성할 수 있습니다.\n이번에는 BIND9를 설치하면서 자동으로 생긴 키를 사용하겠습니다.\n다음으로 해당 IP Address의 서비스를 해당 IP Address가 수정하는 것을 허락하겠다는 내용입니다.\n즉 동일한 곳에 설치된 DHCP 서비스가 BIND9와 상호작용 할 수 있다는 것을 서술합니다.\n다음으로 앞에서 정의해 둔 도메인 정방향, 역방향 영역에 allow-update { key rndc-key; }; 를 추가합니다.\n해당 키를 이용한 갱신을 허락하겠다는 내용입니다. 마쳤으면 아래와 같이 나타납니다.\n확인이 완료되었으면 BIND9를 재시작 합니다.\n1 service bind9 restart DHCP 개요 DHCP는 서브넷팅 관련 지식이 있다면 추가적으로 설명할 내용은 없습니다.\n이번 포스팅에서는 갱신 시간과 같은 상세 설명은 넘어가도록 하겠습니다.\n설명 먼저 전파점 인터페이스를 설정합니다. 인터페이스 이름이 기억이 안난다면 ifconfig으로 확인할 수 있습니다.\n1 nano /etc/default/isc-dhcp-server 다음은 본격적인 설정입니다. 길게 수정할 예정이기 때문에 원본 설정파일을 백업하고 파일을 그림처럼 작성합니다.\n주석을 풀면서 만드셔도 되고, 다 지운 뒤 새로 작성해도 상관 없습니다.\n1 2 3 cd /etc/dhcp cp dhcpd.conf dhcpd.conf.back nano dhcpd.conf 중요한것만 집고 넘어가면\noption이 붙은 내용들은 DHCP서비스를 받는 호스트에게 해당 정보가 뿌려진다는 것을 뜻합니다. 그리고 subnet 영역이 우리가 기본적으로 알고있던 DHCP의 기능, 동적 주소 범위를 나타내는 것이며\n원한다면 이곳에 특정 MAC Address에는 고정주소가 발급되도록 만들 수 있습니다.\n작성이 완료되었다면 dhcpd -t를 통해 문법 검사를 실시할 수 있습니다. 문제 없다면 재시작 하면 완료입니다.\n1 2 dhcpd -t service isc-dhcp-server restart 마치며 검사 먼저 각 클라이언트를 내부망에도 불구하고 static을 해제합니다.\n재부팅 하면 제대로 동적할당 되고있음을 확인할 수 있습니다. 또한 nslookup으로 클라이언트의 아이피주소를 입력하면\n알아서 클라이언트의 호스트 이름으로 자식 도메인네임을 만든 것을 확인할 수 있습니다.\n추가 개념 이번 작업을 해보시면서 이해가 잘 되셨다면 의문점이 들 수 있습니다.\nDHCP도 서버의 일종입니다. 당연히 그럼 통신이 이루어져야 하고 이것은 같은 범위의 네트워크여야 가능합니다.\n그렇다면 다른 범위에서 DHCP를 얻어오는것이 어떻게 이루어지는지 궁금할 수 있습니다. 이것을 가능하게 하는 기능을\nDHCP Relay 라고 합니다.\n이런 의문도 있습니다. 우리는 BIND9를 통해 DNS를 구성했습니다.\n실제 인터넷 모든 전역의 도메인 네임은 굉장히 많습니다. 이것을 전부 한 곳에 몰아서 기록 시킨 것인지 궁금합니다.\n실은 그렇지 않습니다. DNS 자체가 굉장히 많으며 DNS 끼리 정보를 교환합니다. 이것을 DNS Fowarding 이라고 합니다.\n이 두가지 기능에 대해선 다음 포스팅에서 만나보도록 하겠습니다.\n","date":"2022-06-28T21:55:53+09:00","image":"https://docs.9bon.org/p/%EB%A6%AC%EB%88%85%EC%8A%A4-dhcp-ddns/thum_huee7b2a00b68fcdcb5e6741874e0a4086_16212_120x120_fill_box_smart1_3.png","permalink":"https://docs.9bon.org/p/%EB%A6%AC%EB%88%85%EC%8A%A4-dhcp-ddns/","title":"리눅스 DHCP, DDNS"},{"content":"서론 앞에서 IP Address로 신호를 보내봤지만, Domain name형식이 아닌 주소를 쓰는 경우는 매우 보기 어렵습니다.\n대부분의 학생분들은 DNS라는 단어를 들어보셨을 거라 생각합니다.\nIP Address와 Domain name간의 맵핑을 이루게 해주는 서비스, 내지 서버입니다.\n실은 여기 Domain이란 단어는 우리가 알고있는 문자 형식의 주소를 뜻하는 말보다 더 여러가지의 내용이 포괄된 단어입니다.\n이 내용과 관련해서는 다음에 다루어보도록 하겠습니다.\nBind9 설명 우리의 목표는 아래의 토폴로지입니다. 이 블로그 페이지는 Server2에 있는,\nDNS를 만들어주는 Bind9의 설정법을 다루어 볼 것입니다. 그 밖의 설정들은 되어있다고 가정하겠습니다.\nDNS은 Domain name을 IP Address로 변환해주는 정방향, 그 반대인 역방향이라는 개념과 주, 보조영역의 개념이 존재합니다.\n오늘은 주 영역으로 정, 역방향을 구성해보도록 하겠습니다.\n구현 설치하고 zone 설정을 시행합니다.\n1 2 3 apt-get install bind9 cd /etc/bind9 nano named.conf.local 아래처럼 작성해 보겠습니다. 위에는 정방향, 아래는 역방향입니다.\n이제 정의해준 파일을 만들어 주어야 합니다. 포함된 예제가 있으니 그것을 복사해서 사용하겠습니다.\n1 2 cp db.empty /var/cache/bind/busan.com.zone nano /var/cache/bind/busan.com.zone SOA로 시작하는 내용은 DNS의 갱신, 캐시, 재요청등의 설정들을 뜻하며\n그 이후부터는 맨 왼쪽의 문자로 접근했을 때 내보낼 결과를 뜻합니다. 단 @는 busan.com 자체가 요청 됐을때의 경우입니다.\n이제 역방향 파일을 만들어주겠습니다.\n1 2 cp /var/cache/bind/busan.com.zone /var/cache/bind/busan.com.zone.rev nano /var/cache/bind/busan.com.zone.rev IN 이 PTR로 바뀌었다는 것 말고는 뜻이 동일합니다.\n마무리 하셨다면\n1 named-checkconf 로 신택스 테스트를 할 수 있습니다. 아무 출력도 없으면 통과 된 것입니다.\n1 service bind9 restart 로 bind9설정을 적용시킬 수 있습니다.\n외부 설정 이제 Server01,02 그리고 Client01 각각 DNS 위치가 Server02라는 것을 설정해야합니다.\n이 또한 나중에 인터넷 연결이 필요할 때 다시 원상태로 복구해야하는 점을 고려하여 원래 있던 내용을 주석처리 하시길 바랍니다.\n윈도우는 쉬우니 넘어가고 Debian만 살펴보겠습니다.\n1 nano /etc/resolv.conf 이렇게 설정하시면 완료됩니다. 참고로 리눅스에서는 DNS주소 설정이 resolv뿐만 있는것이 아닙니다.\n테스트 먼저 Server01로 가보겠습니다.\n1 2 3 nslookup client01.busan.com nslookup www.busan.com nslookup 192.168.10.10 정상적으로 나오는 모습을 확인할 수 있습니다.\nclient01의 브라우저로 www.busan.com 에 접속해 보겠습니다.\n역시 잘 되는 모습을 확인할 수 있습니다.\n","date":"2022-04-12T20:49:09+09:00","image":"https://docs.9bon.org/p/dns-server-bind9/thum_hu824554077030e2b5363c801976600b24_607940_120x120_fill_box_smart1_3.png","permalink":"https://docs.9bon.org/p/dns-server-bind9/","title":"DNS Server, BIND9"},{"content":"서론 GuestOS에서 무언가를 설치하기 위해 인터넷과 연결하여 사용할 때가 있을 것이며\n인터넷이 아닌 공부 목적의, 내부 네트워크의 환경을 사용하는 일도 있을 것입니다. 이 두가지를 쉽게 오가면서 사용할 수 있도록\n미리 준비 해놓으면 굉장히 편리합니다.\n우리의 목표는 아래의 토폴로지와 같은 매우 간단한 형태의 네트워크망입니다.\nVMNet 설명 VMNet은 VMWare Workstation에서 지원하는 가상 인터페이스, 네트워크입니다. 이것을 통하여 내부 네트워크망을 구현할 수 있습니다.\n네트워크 환경은 Subneting, Gateway 그리고 구축하지 않아도 제공되는 DHCP 서비스등을 설정할 수 있으며 인터페이스는 위의 네트워크 환경이 아니더라도 NAT, Bridge 등을 지원합니다.\n이번 시간에 필요한 환경은 하나의 내부 네트워크가 필요합니다. VMNet은 하나를 추가로 만들 것입니다.\nVirtual Network Editor 설정 Edit→Virtual Network Editor 으로 들어갑니다. 그 후에 아래의 Change Settings까지 눌러주셔야 합니다.\n적용된 설정 설명 Host-only 브릿지, 나트가 아닌 외부와 단절된, VM 내부에서만 동작하게 되는 망입니다. Connect a host vitual adapter~ 체크를 하게되면 HostOS 설정(ex 윈도우 제어판)에도 해당 어뎁터가 감지됩니다. Use local DHCP~ VMWare에서 지원하는 DHCP를 적용시킬 수 있습니다. 우리는 Add Network로 Vmnet10 을 추가하면 됩니다. 설정하면 다음과 같습니다. Linux(Debian계열) 설명 인터넷망과 내부망의 연결을 오갈수 있다고 끝난 이야기가 아닙니다. 그때 마다 올바른 아이피주소를 사용해야 할 것입니다.\n기존은 DHCP로 되어있을 것이니 Static설정을 추가하고 경우에 따라 주석처리, 주석해제를 반복하며 사용하면 편리합니다.\n설정 위쪽(1)의 버튼을 눌러 잠깐 GuestOS에서 빠져나올 수 있습니다. 그 다음(2)을 누르면 바로 인터페이스 설정에 들어갈 수 있습니다.\n이곳에서 앞에서 설정했던 VMNet을 선택해주겠습니다. 만약 GuestOS가 실제 Host였다면 인터페이스에서 나온 선이 인터넷이\n아닌 내부망의 허브에 물린 셈입니다.\n다시 Debian으로 복귀해 본격적인 설정하기 앞서 ifconfig으로 인터페이스 이름을 확인해 보겠습니다. 당연히 명령어를 사용하실 때는 권한에 유의하셔야 합니다.\n1 ifconfig 저같은 경우는 ens33입니다. 사진처럼 외부 아이피주소가 할당된 인터페이스를 찾으면 됩니다.\n이제 이름을 기억하고 아래처럼 인터페이스 설정파일에 접근하겠습니다.\n1 nano /etc/network/interfaces 여기서 부터는 오타에 주의해야합니다. 오타가 발생하면 인터페이스 갱신이 불가능 해지며 이것은 연결이 불가능함을 뜻합니다.\n여기서는 각 인터페이스의 address, subnet, netmask, broadcast, gateway 등을 설정할 수 있습니다.\n기존의 DHCP 설정은 주석처리하고 아래와 같이 적어보겠습니다.\n이후엔 오타를 다시 확인해보고 갱신 명령을 실행시키면 완료됩니다. 설정이 제대로 변경되었는지 확인해봅시다.\n1 2 service networking reload ifconfig Windows 설명 Windows는 Linux보다 더 편리하게 설정할 수 있습니다. 먼저 위와 동일하게 해당 GuestOS의 인터페이스 VMNet은 변경해야 합니다.\n위의 토폴로지처럼 마찬가지로, 동일한 VMNet과 연결하면 되겠습니다. 또한 윈도우에서 아이피 주소를 변경하는 방법은 자세히\n나와있으니 쉽게 하실수 있습니다만 윈도우 방화벽 정책에 ICMP와 같은 여러 프로토콜이 막혀있기 때문에 방화벽을 설정하거나 해제해야 합니다.\n마무리 서로 ping명령어를 사용하여 연결이 제대로 되어있는지 확인할 수 있습니다.\n","date":"2022-04-01T08:30:11+09:00","image":"https://docs.9bon.org/p/vmware-%EC%84%9C%EB%B2%84-%EA%B3%B5%EB%B6%80%ED%99%98%EA%B2%BD-%EB%A7%8C%EB%93%A4%EA%B8%B0/thum_hu935fc5a71ae9667b09b6d28bb6bef806_18367_120x120_fill_box_smart1_3.png","permalink":"https://docs.9bon.org/p/vmware-%EC%84%9C%EB%B2%84-%EA%B3%B5%EB%B6%80%ED%99%98%EA%B2%BD-%EB%A7%8C%EB%93%A4%EA%B8%B0/","title":"VMWare 서버 공부환경 만들기"},{"content":"백업 설명 백업/복원은 말 그대로 나중에 되돌릴 수 있게 사본을 복사하여 저장하는 기능입니다. 과거에도 OS에서 지원하는\n소프트웨어가 있었지만, 그럼에도 저 같은 경우에는 CD, USB에 담아서 사용하는 고스트를 자주 봤었던 기억이 있습니다.\n그 이유와 관련하여 방식의 종류를 살펴보도록 하겠습니다.\n백업의 종류 디스크를 통째로, 디스크의 일부 파티션만, 파일만 백업, 이것을 떠나서 백업은 세 가지의 방식이 존재합니다.\n1일 2일 3일, 총 삼일 동안 파일이 써지고 있는 동일한 시스템을 백업했다고 가정하고 예를 들어보겠습니다.\n전체 백업(Full)\n1일 //// __ __\n2일 //// //// __\n3일 //// //// ////\n차등 백업(Differential)\n1일 //// __ __\n2일 __ //// __\n3일 __ //// ////\n증분 백업(Incremental)\n1일 //// __ __\n2일 __ //// __\n3일 __ __ ////\n간단히 전체는 그 말대로 모든 내용을, 차등은 첫 백업 이후의 내용들을, 증분백업은 각 백업시의 변화 내용을\n기록하는 것입니다. 이렇게 보면 증분백업이 가장 좋아보이지만 복원시 오랜 시간이 소모되고 백업 파일이\n하나라도 손실되면 복원이 불가능한 특징을 가지고 있습니다.\n요즘엔 고스트가 윈도우에 설치되어 증분백업까지 지원을 하지만 과거의, 특히 컴퓨터 수리를 업으로 하는 입장에서는\n각기 다른 시스템을 접해야 했기 때문에 전체 백업이 좋은 선택지였다고 생각합니다.\n참고로 맥의 타임머신도 기본은 증분백업이며, 타임머신을 포함한 대부분 요즘 소프트웨어는 세 가지 백업 방식을\n모두 지원하고 있습니다.\n명령 tar tar은 백업보다 압축이 주 목적인 명령어입니다.\n파일 전체백업\n1 tar cvfp home.tar /file 파일 증분백업\n1 tar cvfp home.tar /file 백업 위치지정\n1 2 3 4 5 6 tar zcf /dev/sdb1 /file `` 현재 디렉토리에 압축 해제 ```bash tar zcf /dev/sdb1 /now dump 파일 전체백업\n1 dump -0f /dev/sdb1 /file 파티션 백업(sda1), 경로지정, 정보 기록(-u:/etc/dumpdates로)\n1 dump -0u -f /dev/sdb1 /dev/sda1 증분 백업(-2:2레벨의 백업)\n1 dump -2u -f /dev/sdb1 /dev/sda1 복원(-r:전체:단 파일시스템 마운트 동일해야함, -i:대화식)\n1 restore -rf /dev/sdb1 dd 디스크 전체, 특정 파티션 모두 가능합니다. 해당 명령어는 백업뿐만 아니라 여러곳에서 쓰입니다.\n전체 백업(bs:블럭 사이즈, 디스크 형편에 맞출 것)\n1 dd if=/dev/sda of=/dev/sdb bs=256k ","date":"2022-03-25T11:21:02+09:00","image":"https://docs.9bon.org/p/%EB%A6%AC%EB%88%85%EC%8A%A4-%EB%94%94%EC%8A%A4%ED%81%AC-%EB%B0%B1%EC%97%85/thum_hu8d768d0c7f2f69c48b4738ec3466ffb8_400747_120x120_fill_box_smart1_3.png","permalink":"https://docs.9bon.org/p/%EB%A6%AC%EB%88%85%EC%8A%A4-%EB%94%94%EC%8A%A4%ED%81%AC-%EB%B0%B1%EC%97%85/","title":"리눅스 디스크 백업"},{"content":"하드디스크의 문제 증상 저장, 삭제시 에러문구 : \u0026ldquo;Structure needs cleaning\u0026rdquo;, \u0026ldquo;구조에 청소가 필요합니다\u0026rdquo;\nls 시 : ??? ?? ???? 로 표시\n설명 불량, 노후화, 최악에는 소프트웨어의 오류에도 하드디스크에 치명적인 문제가 발생할 수 있습니다.\n제가 겪은 문제는 서버가 일종의 과부하를 받을 때 디렉토리 일부가 사라져 조회조차 하지 못하는 상황에\n놓이는 것이였습니다.\n놀라서 umount하거나 reboot해서 돌아와보면 디렉토리가 다시 보였지만\n디렉토리를 포함한 파일의 일부가 열리지만 소실되었거나, 열리지도 않으며 청소가 필요하다는 경고가 나타났습니다.\n흥미로웠던 사실은 비교적 최근에 생성된 것만 그런 상태였습니다. 추정해보면 EXT파일시스템의 특징이\n여기서 보이는 것이 아닐까 생각했습니다.\n현재는 과거의 사태에 높은 확률을 따라, 하드디스크의 불량이라고 생각하고 있지만\n정확한 원인을 알기는 어려운 상황입니다. 이런일이 발생한다면 어떻게 대처하고 판단해야하는지\n작성해 보겠습니다.\n해결 fsck fsck는 리눅스에서 지원하는 Filesystem fix 명령입니다. 실행하면 체크를 하고, 문제가 생긴 항목을 불러준 뒤\n허락하면 교정을 시작합니다. 당연히 un mount 되어있는 상황이여야 합니다.\n1 2 umount /dev/\u0026lt;장치명\u0026gt; fsck -y /dev/\u0026lt;장치명\u0026gt; Yes 또는 No로 물어보는 항목이 많고 대부분 오래 걸리므로 -y를 붙여 진행할 수 있습니다.\nbadblocks badblocks는 리눅스에서 기본적으로 하드디스크의 badblock을 점검해주는 명령어 입니다.\n어차피 읽기 전용모드로 작동되기 때문에 un mount 되어 있을 필요는 없으나\n항상 장치적 문제를 해결할 때는 un mount 하시는 것을 추천드리고 싶습니다.\n1 2 umount /dev/\u0026lt;장치명\u0026gt; badblocks -v -o out.txt /dev/\u0026lt;장치명\u0026gt; -v는 자세하게 보여달라는 뜻이고 -o는 badblock list 를 file output으로 해달라는 뜻입니다.\nsmartctl smartctl은 기본 제공은 아니지만 자주 사용했었던 것입니다.\n하드디스크의 모니터링 기술 SMART(Self-Monitoring, Analysis, and Reporting Technology)을 사용하여\n점검하는 도구이며 아주 옛날의 하드디스크가 아닌 이상 대부분 장착되어 있습니다.\n1 2 3 apt-get install smartmontools umount /dev/\u0026lt;장치명\u0026gt; smartctl -a /dev/\u0026lt;장치명\u0026gt; 자세히는 -a, 간단히는 -H, 정보만은 -i 옵션을 사용하여 진행 가능합니다.\n","date":"2022-03-12T03:43:58+09:00","image":"https://docs.9bon.org/p/%EB%A6%AC%EB%88%85%EC%8A%A4-%EB%94%94%EC%8A%A4%ED%81%AC-%EB%AC%B8%EC%A0%9C/thum_hu4f4c739fc0a57bc676838f361bf202d4_469813_120x120_fill_box_smart1_3.png","permalink":"https://docs.9bon.org/p/%EB%A6%AC%EB%88%85%EC%8A%A4-%EB%94%94%EC%8A%A4%ED%81%AC-%EB%AC%B8%EC%A0%9C/","title":"리눅스 디스크 문제"},{"content":"Partion 설명 기본적으로 리눅스의 Filesystem은 다음과 같은 과정을 통해 만들어집니다. Partion \u0026gt; Format \u0026gt; Mount 의 과정을 거칩니다.\n윈도우는 자동 마운트됩니다.\n기본적으로 Partion은 하나의 보조기억장치를 여러 개의 Filesystem으로 만들고 싶을 때 사용합니다. 분할해서 사용하지\n않는다고 해도 칸 하나를 사용하겠다는 명시가 필요합니다.\n추가로 리눅스에서는 여러개의 저장 장치를 하나로 합치는 LVM이라는 개념이 존재합니다. Partion의 반대 개념에 가까우며\n최근에 윈도우에도 비슷한 기능이 추가되었습니다.\n명령어 1 fdisk -l 로 정확한 장치를 찾아서\n1 fdisk /dev/[장치명] 으로 파티션 모드에 진입할 수 있습니다. 명령어로 진행되는 것이 아니라, 마법사형식을 이용합니다.\nn, p 등을 누르면서 안내하는 내용을 따르면 문제 없습니다.\n윈도우와 다르게 고려되어야 할 사항은 주영역, 가상영역, 그리고 Swap입니다. 이것은 가상메모리의 역할을 합니다.\nFormat 설명 저장공간의 Format은 선택한 공간에 FileSystem을 구성시키는 것을 뜻합니다. 이 단어가 주로 초기화 작업을 뜻하는 이유는\nFileSystem은 하나의 공간에 하나만 사용될 수 있으며 새롭게 FileSystem 을 구성시킬때 본래있던\n저장장치의 파일을 가르키는 맵핑, 테이블 정보가 덮어씌워지면서 사실상 정보가 삭제된 것처럼 되기 때문입니다.\n리눅스에서 자주 사용되는 FileSystem은Ext4, XFS등이 있습니다. 자세한 내용은 다음에 다루겠습니다.\n명령어 혹시 쓰던 저장장치를 포맷할 계획이라면 당연히 unmount된 상태여야 합니다.\n1 mkfs.[파일 시스템 타입] /dev/[장치] 마찬가지로 마법사 형식입니다. y를 누르며 진행할 수 있습니다.\nMount 설명 mount는 특정 저장장치를 디렉토리와 연결하는 행위입니다. 윈도우는 알아서 해주거나, 파일 관리자를 거쳐 해결할 수 있으며\n요즘 우분투 사용자 편의를 위해 알아서 데스크탑에 mount 하게 됩니다.\n물론 mount를 하여 제대로 쓰기 위해선 fdisk와 같은 명령어로 포멧, 파일시스템 구축이 완료된 상태여야 합니다.\nMount 상태 확인 1 findmnt fdisk -l 또는 mount -l 도 있지만 해당 경우에는 위의 명령어가 훨씬 보기 편리했습니다.\nMount 하기 1 mount /dev/\u0026lt;장치명\u0026gt; \u0026lt;마운트 포인트\u0026gt; 취소는\n1 umount /dev/\u0026lt;장치명\u0026gt; 하지만 위의 명령어는 일시적이며 reboot 후 필요하다면 다시 입력해야 합니다.\nfstab-파일시스템 테이블 부팅 시 자동으로 mount가 되기 위해선 해당 파일을 수정해야 합니다.\n1 nano /etc/fstab 기본적인 mount 는 하단에 \u0026lt;장치명\u0026gt; \u0026lt;마운트 포인트\u0026gt; \u0026lt;파일 시스템 종류\u0026gt; \u0026lt;옵션\u0026gt; 을 추가하면 reboot 후부터 적용됩니다.\n주의해야 할 사항이 있는데\n만약 현재 ssh등의 방법으로 remote중에 이것을 변경했다면 반드시 오탈자가 없는지 확인해야 합니다.\n만약 오타가 존재한다면 리눅스가 reboot 중에 SSH server를 포함한 프로세스를 실행하기 전 오류로 중단되므로 담당자가 remote를\n하지 못하고 직접 가서 local상으로 부팅 설정을 해야 하는 상황이 발생합니다.\n","date":"2022-03-01T23:17:11+09:00","image":"https://docs.9bon.org/p/%EB%A6%AC%EB%88%85%EC%8A%A4-%EB%94%94%EC%8A%A4%ED%81%AC-%EC%82%AC%EC%9A%A9/thum_hub73c81dae35932a884eebb6fb7bc512a_556211_120x120_fill_box_smart1_3.png","permalink":"https://docs.9bon.org/p/%EB%A6%AC%EB%88%85%EC%8A%A4-%EB%94%94%EC%8A%A4%ED%81%AC-%EC%82%AC%EC%9A%A9/","title":"리눅스 디스크 사용"},{"content":"윈도우 윈도우에서의 도커 도커의 기본 환경은 리눅스에 맞춰져 있습니다. 따라서 윈도우에서 도커를 사용하려면 다른 방법을 선택할 필요가 있으며\n각 방법은 장단점이 존재했습니다. 대부분 가상머신을 이용한 방법입니다.\n가상 머신 출처\n가상머신은 기존의 운영체제(Host OS)에 가상의 운영체제(Guest OS)를 올릴 수 있게 해주는 소프트웨어 입니다.\n도커도 가상머신과 흡사하지만 GuestOS를 모두 올리는 것이 아니라. 필요한 쉘과 커널등만 올린다는 차이점이 있습니다.\n즉 도커는 가상머신 만큼 자유롭지는 못하나. 환경을 만들고 사용하는 부분에서 가볍게 진행 가능합니다.\n정리해보면 윈도우에서 우분투 컨테이너를 사용하려면\n윈도우 -\u0026gt; 가상머신 -\u0026gt; 리눅스 -\u0026gt; 도커 -\u0026gt; 컨테이너\n의 관계를 거쳐야 합니다. 그렇게 최적화된 방법은 아닐 것입니다.\n윈도우에서 사용하는 방법들 Docker Toolbox 공식 Github\n과거에는 Docker Toolbox를 주로 사용했습니다. 이것은 Virtualbox로 도커를 쉽게 설치/연결 시켜주는 가상머신 파일입니다.\n그 시절 때 상대적으로 가벼웠던 Virtualbox는 도커를 쓰기 위해 잠깐 사용 할 가상머신으로 적합했습니다.\n그러나 가상머신 특징상 HostOS와 GuestOS가 분리되어 IDE로 Remote하지 않는 이상 환경 공유에 불편함이 따랐습니다.\n결국은 이후에 더 편리한 방법이 나와 2019년에 프로젝트가 중단되었습니다.\nWLS2 WLS2는 Windows에서 제공하는 리눅스용 하위 프로그램입니다. 쉽게 말하면 오직 리눅스 계열을 구동시킬 수 있는 가상머신입니다.\n기존의 WLS1은 가상머신과 거리가 멀되 HostOS인 윈도우와 호환성이 높게 만들어졌었으나\nHyper-V를 사용하는 WSL2로 만들면서 WLS1보다 가상 환경의 성능을 더 우선시하게 만들어 졌습니다.\n비록 WLS1보다는 문제가 있지만 HostOS와 환경 공유도 가능하고 GuestOS의 성능도 뛰어나 출시 후 각광 받았습니다.\n이 곳에다 Docker를 설치하여 컨테이너가 필요한 순간마다 WSL2를 사용하면 됩니다.\nDocker Desktop 위에서 나오는 모든 방법들은 컨테이너를 사용하기 위해 가상 머신을 사용해야 한다는 공통점을 가지고 있습니다. 이것은 번거로운 일입니다.\nDocker Desktop은 이와 다르게, 설치되어있는 WSL2을 이용하여 HostOS에서 Docker를 사용할 수 있도록 도와줍니다.\n그렇기 때문에 사용하기 위해선 Hyper-V과 WSL2가 설치되어 있어야 합니다.\n예전에는 ARM 아키텍처를 이용하는 맥OS 계열에서도 이것을 사용했으나\n최근 Docker는 ARM아키텍처를 지원하게 되었기 때문에 해당 선택지를 고를 필요는 없습니다.\n이것은 편리하지만 심각한 메모리의 사용률과 상업적 이용의 유료화 때문에 상위호환의 선택지가 될 수 없습니다.\n","date":"2022-02-20T16:54:39+09:00","image":"https://docs.9bon.org/p/%EB%8F%84%EC%BB%A4%EC%99%80-%EC%9C%88%EB%8F%84%EC%9A%B0/thum_hu28a6acd632bd249172ae213498f2ef9f_353935_120x120_fill_box_smart1_3.png","permalink":"https://docs.9bon.org/p/%EB%8F%84%EC%BB%A4%EC%99%80-%EC%9C%88%EB%8F%84%EC%9A%B0/","title":"도커와 윈도우"},{"content":"간단한 형식 운영체제 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #원본이 될 이미지, https://hub.docker.com/ 참고 #버전을 기록하지 않으면 최신 버전을 사용하게 된다. FROM ubuntu:16.04 #작성자 정보, 필수는 아님, 옛날에는 MAINTAINER을 사용했으나 대체됨 LABEL email=\u0026#34;tayasriel@gmail.com\u0026#34; LABEL name=\u0026#34;BonhyeonGu\u0026#34; #언어 설정, ENV 자체는 도커 이미지 환경변수를 조작한다. ENV LC_ALL=C.UTF-8 ENV LANG=C.UTF-8 #명령어, 물음이 오는것을 피해야 진행이 가능하다. RUN apt-get update -y \u0026amp;\u0026amp; \\ apt-get install -y nano #노출될 포트, 주의할 점은 이게 포트포워딩을 해주는 것이 아님 EXPOSE 5000, 5001 인터프리터 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 FROM ubuntu LABEL email=\u0026#34;tayasriel@gmail.com\u0026#34; LABEL name=\u0026#34;BonhyeonGu\u0026#34; RUN apt-get update -y \u0026amp;\u0026amp; \\ apt-get install -y python-pip python-dev #호스트 경로 .의 파일들을 컨테이너의 경로 /app으로 복사시킨다. COPY . /app #컨테이너가 실행되면 활성화 될 경로, cd /app 과 동일하다. WORKDIR /app RUN pip install -r requirements.txt #명령어 실행, RUN과 다르게 컨테이너가 활성화 될 때 마다 실행된다. ENTRYPOINT [ \u0026#34;python\u0026#34; ] #명령어 실행, ENTRYPOINT 와 비슷하지만, 만약 도커 컨테이너 실행과 함께 #인수가 제공되면 그것으로 대체된다. CMD [ \u0026#34;app.py\u0026#34; ] ## 즉 이 형태는 컨테이너 start와 함께, 파이썬이 실행되고 컨테이너가 stop되는 형식 도커 컴포즈, 도커 파일의 조합 안내 이런 방법으로 컴공에 새로 입문하시는 분들께 개발환경을 배포할 수 있을 것 같습니다.\n파이썬 인터프리터 도커파일\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 FROM ubuntu LABEL email=\u0026#34;tayasriel@gmail.com\u0026#34; LABEL name=\u0026#34;BonhyeonGu\u0026#34; RUN apt-get update -y \u0026amp;\u0026amp; \\ apt-get install -y python3-pip python3-dev #mkdir 이 필요할 수 있다. WORKDIR /app RUN pip install --no-cache-dir --upgrade pip \u0026amp;\u0026amp; \\ pip install numpy #경우에 따라서 pip 모두 업그레이드 받는건 피해야겠다. 꽤 오래걸림 #명령어 실행, RUN과 다르게 컨테이너가 활성화 될 때 마다 실행된다. ENTRYPOINT [ \u0026#34;python3\u0026#34; ] #명령어 실행, ENTRYPOINT 와 비슷하지만, 만약 도커 컨테이너 실행과 함께 #인수가 제공되면 그것으로 대체된다. CMD [ \u0026#34;app.py\u0026#34; ] ## 즉 이 형태는 컨테이너 start와 함께, 파이썬이 실행되고 컨테이너가 stop되는 형식 컴포즈\n1 2 3 4 5 6 version: \u0026#34;3\u0026#34; services: test1: build: . volumes: - .:/app 이후\n1 docker-compose up \u0026amp;\u0026amp; docker-compose rm -f 로 쉬운 실행/삭제 가능\n파이썬 리모트 전용 도커파일\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 FROM ubuntu LABEL email=\u0026#34;tayasriel@gmail.com\u0026#34; LABEL name=\u0026#34;BonhyeonGu\u0026#34; #언어 설정, ENV 자체는 도커 이미지 환경변수를 조작한다. ENV LC_ALL=C.UTF-8 ENV LANG=C.UTF-8 RUN apt-get update -y \u0026amp;\u0026amp; \\ apt-get install -y python3-pip python3-dev #vscode remote시 초기 경로를 root로 잡는다. WORKDIR /root RUN pip install --no-cache-dir --upgrade pip \u0026amp;\u0026amp; \\ pip install numpy 컴포즈\n1 2 3 4 5 6 7 8 version: \u0026#34;3\u0026#34; services: test2: #stdin_open: true # docker run -i tty: true # docker run -t build: . volumes: - .:/root 이후\n1 2 3 4 docker-compose up -d code . 그리고 리모트, 다쓰면 이후로 docker-compose down ","date":"2022-01-02T02:21:44+09:00","image":"https://docs.9bon.org/p/%EB%8F%84%EC%BB%A4-%ED%8C%8C%EC%9D%BC/thum_hue4e4871d6d6adcc9d6f68eaeea4aa7a3_628503_120x120_fill_box_smart1_3.png","permalink":"https://docs.9bon.org/p/%EB%8F%84%EC%BB%A4-%ED%8C%8C%EC%9D%BC/","title":"도커 파일"},{"content":"설명 문제 윈도우즈, 윈도우즈 서버 운영체제를 사용할 때 정책을 사용해야 하는 이유로\n반드시 공식 지원하는 \u0026lsquo;RDP\u0026rsquo;를 사용해야 할 때가 있습니다.\n해당 프로그램은 대부분의 기능을 지원하지만 의외의 문제점이 있습니다.\n바로 SSH, 원격 터미널과 흡사한 부분이 있는 것입니다.\nRDP 은 유저가 연결을 끊으면 로그오프되어 Foreground 는 당연하고 Background마저 설정해 놓지 않으면 닫히게 됩니다.\n한번은 윈도우 환경에서만 지원하는 GUI Foreground 프로세스를 지속적으로 가동시킬 목적으로 AWS에서 Windows Server를 구입하여 사용한 적이 있었습니다.\n하지만 위와 같은 이유로 곤혹을 겪었습니다.\n해결 해결방법은 RDP를 마치고 싶을 때 연결 종료가 아닌 작업중인 호스트에서 자기 자신한테 RDP를 연결 시키는 것입니다.\n이러면 RDP 가 끝나지 않았으니 작업을 멈추지 않으며, 다른 사람이 연결을 신청했으니 현제 연결중인 클라이언트는 끊기게 됩니다.\n나중에 알게 됐지만 이 방법은 여러 곳에서 많이 사용 중 이였습니다.\nPowerShell 코드 코드 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 $ID $FIND = 0 $LINES = query session foreach ($LINE in $LINES) { $WORDS = $LINE.split() | where {$_} foreach ($WORD in $WORDS) { if($WORD -eq \u0026#34; \u0026#34;) { echo \u0026#34;!\u0026#34; continue } if($FIND -eq 1) { echo \u0026#34;!\u0026#34; continue } if($WORD -eq \u0026#34;user01\u0026#34;) { $FIND = 1 } } if($FIND -eq 1) { break } } $CMD = \u0026#34;tscon $ID /dest:console /password:!!!!!!!!\u0026#34; iex $CMD 설명 먼저 현재 진행중인 RDP를 찾아냅니다.\n이후 해당 세션을 tscon으로 루프백 연결시키게 만듭니다.\n파워쉘 코드를 실행하는 배치파일 코드 1 runas /user:localhost\\administrator \u0026#34;powershell.exe -noprofile -executionpolicy bypass -file \u0026#34;POWER경로\u0026#34;\u0026#34; 설명 또 다른 문제로, 해당 Powershell 코드는 관리자 권한이 필요한데\n세션에 접속한 사용자는 관리자가 아니였습니다. 이를 위해 runas를 사용하여\n관리자 권한을 통하여 코드를 실행하게 만들었습니다.\n","date":"2021-12-31T11:38:57+09:00","image":"https://docs.9bon.org/p/rdp-%EB%AC%B8%EC%A0%9C/thum_huad98ced58dee19f3c4c0f80aa2d20063_204635_120x120_fill_box_smart1_3.png","permalink":"https://docs.9bon.org/p/rdp-%EB%AC%B8%EC%A0%9C/","title":"RDP  문제"},{"content":"zsh 설명 기능이 다양해서 유행중인 bash 쉘을 대체하는 쉘입니다.\n설치 1 2 apt-get install zsh chsh -s /usr/bin/zsh 쉘은 유저에 귀속되므로 권한에 주의해야 합니다. 또한 작은 따옴표가 아닙니다.\n재시작 하면 설치가 완료됩니다.\n1 echo $SHELL 로 확인 할 수 있습니다.\noh-my-zsh! 설명 zsh를 설정할 수 있는 편리한 콘피그들을 제공해주는 프레임워크입니다.\n설치 1 curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh 해당 설치법은 http://ohmyz.sh/ 에서 제공하는 방법입니다. 문제가 생길경우 이곳에서 편집되었는지 확인할 수 있습니다.\n설정 1 vim ~/.zshrc 에서 제가 주로 사용하는 것은\nZSH_THEME=\u0026ldquo;agnoster\u0026rdquo;\n입니다.\n또한 agnoster 테마를 이용하기 위해서는 다른 글꼴이 필요합니다. 적당한 디렉토리에\n1 2 3 git clone https://github.com/powerline/fonts.git cd fonts ./install.sh 또는 apt 패키지 관리자로 설치 가능합니다.\n1 apt-get install fonts-powerline 만약 wsl2와 같은 윈도우 환경이라면 수동으로 설치해야합니다. https://github.com/powerline/fonts.git 의 릴리즈에 들어가 압축파일을 받은 뒤 수동 설치를 진행하고 터미널-\u0026gt;속성에서 글꼴을 변경할 수 있습니다.\n기타 업데이트 충돌 오류 여러가지 수정하고 oh-my-zsh 업데이트를 받을 시 git 오류가 발생하는 것을 확인했습니다.\n1 cd ~/.oh-my-zsh 후\n1 2 3 git status git add git commit -m 등을 이용하여\n1 omz update 로 수동 업데이트를 진행하여 해결했습니다.\n","date":"2021-12-24T16:11:32+09:00","image":"https://docs.9bon.org/p/zsh-oh-my-zsh/thum_hue2dfd5a3fbfd61a16a45dd88264e2edf_18092_120x120_fill_box_smart1_3.png","permalink":"https://docs.9bon.org/p/zsh-oh-my-zsh/","title":"zsh, oh-my-zsh!"},{"content":"기본 컨테이너 조회 1 docker ps -a 첨자 뜻 -a 꺼져있는 것을 포함하여 모두 컨테이너 시작, 종료 1 docker apache start 이후 내용 뜻 start 실행 restart 재시작 stop 중지 status 상태확인 컨테이너 생성/수정 일반적인 경우 1 docker container run --name nextcloud -d -v /media/ext1/Docker/cloud/:/var/www/html/data -p 1234:80 nextcloud 첨자 뜻 -run 생성 후 바로 실행함 \u0026ndash;name 생성될 컨테이너의 이름 지정 -d 백그라운드(데몬 프로세스)로 실행 -v (복수가능) 저장공간 맵핑/마운트 컨테이너 외부(호스트) : 컨테이너 내부 -p (복수가능) 포트 맵핑/포워딩 컨테이너 외부(호스트) : 컨테이너 내부 이후 내용엔 이미지 파일 이름 환경변수 설정 1 2 docker container run --name test_DB_YJ -d -p 49152:22 -p 1234:3306 -e MYSQL_ROOT_PASSWORD=12345 mariadb --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci docker run -e \u0026#34;ACCEPT_EULA=Y\u0026#34; -e \u0026#34;SA_PASSWORD=12345\u0026#34; -p 1234:1433 --name rpadb -d mcr.microsoft.com/mssql/server:2019-latest 첨자 뜻 -e 컨테이너 내부 환경변수 수정 실행 컨테이너 내부 쉘실행 1 docker exec -it nextcloud bash 첨자 뜻 -i 상호작용 할 것, 입력 출력이 가능해짐 -t 쉘과 같이 사용 될 것 이후 내용엔 실행할 명령어 컨테이너 내부 권한으로 명령 실행 1 2 docker exec -u www-data nextcloud php occ files:scan --all docker exec -u 0 -it rpadb /bin/bash 첨자 및 매게변수 뜻 -u 해당 유저의 권한으로 이후 내용엔 실행할 명령어 ","date":"2021-10-03T01:40:54+09:00","image":"https://docs.9bon.org/p/%EB%8F%84%EC%BB%A4-%EB%AA%85%EB%A0%B9%EC%96%B4%EC%99%80-%EC%98%88%EC%A0%9C/thum_hue0bf79941b42c6128bca718bfc176f0c_48339_120x120_fill_box_smart1_3.png","permalink":"https://docs.9bon.org/p/%EB%8F%84%EC%BB%A4-%EB%AA%85%EB%A0%B9%EC%96%B4%EC%99%80-%EC%98%88%EC%A0%9C/","title":"도커 명령어와 예제"},{"content":"서론 only HTTP 사용된 전달은 보호되지 않습니다. 우리가 입력할 아이디와 비밀번호는 평문으로 전달되게 될 것이며\n이는 공격자가 쉽게 중간에서 가로챌 수 있습니다.\n이를 방지하기 위해 지금은 TLS내지 SSL을 사용한 HTTPS가 사용되고 있습니다.\n국내에서는 웹서버 정보제공자가 로그인과 관련된 페이지에서 HTTPS 사용을 의무한 법안이 시행중입니다.\n인증서 페이지 제공자와 수신자는 CA(인증 기관\u0026ndash;업체)를 사이로 아래와 같은 작업을 시행합니다.\nLet\u0026rsquo;s Encrypt https://letsencrypt.org/ko/ Let\u0026rsquo;s Encrypt 는 무료 CA입니다. 대신 해당 인증서는 짧은 유효기간을 가졌으며 설정의 제한이 많지만\ncertbot을 통하여 쉽고 빠른 추가/갱신이 가능합니다.\ncertbot certbot은 Let\u0026rsquo;s Encrypt에서 인증서와 키의 발급을 용이하게 도와주는 프로그램입니다. 아래처럼 설치할 수 있습니다.\n1 apt-get install python3-certbot-apache 공식 사이트에는 python-certbot-apache 라고 나와 있었지만 작동되지 않습니다. 파이썬 버전에 참고해야 하는 것 같습니다.\n일반 인증서 발급 1 certbot --apache certonly 입력후 도메인을 포함한\n와일드카드 인증서 발급 와일드카드 인증서는 하나의 부모 도메인 인증서로 자식 모두를 등록시킬 수 있는 인증서입니다.\n하지만 자동 갱신을 시킬 방법이 없어 이점에 주의해야합니다.\n만약 www.a.com, mail.a.com 등 *a.com을 인증시키는 것이 목표라면 다음과 같습니다.\n1 certbot certonly --manual --preferred-challenges dns -d \u0026#34;*.a.com\u0026#34; -d \u0026#34;a.com\u0026#34; 하지만 위의 일반 인증서 발급과 다르게 추가 인증이 필요하다는 메세지를 볼 수 있습니다. 몇가지 제시를 해주는데\n도메인이 본인의 것이 맞다면 도메인 인증이 가장 편리한 것 같습니다.\n저는 구글 도메인 서비스를 이용 중이기 때문에 아래의 화면에서 설정 가능합니다.\n타입은 텍스트로 한 후 호스트이름과 데이터에 요구조건대로 적용하면 완료됩니다.\n단 도메인 정보가 전파되는데 시간이 걸릴 수 있으니 조금 기다렸다가 nslookup등으로 확인 한 후 다음 버튼을 누르시는걸 권장합니다.\n인증서 취소 여러가지 방법이 있지만 인증키를 모두 가지고 있다면 아래 방법이 가장 편리합니다.\n1 certbot revoke --cert-path cert.pem --key-path privkey.pem cron 을 통한 자동갱신 인증서를 갱신시키는 명령어는 다음과 같습니다.\n1 certbot renew --quiet 하지만 유효기간이 가까워 지기 전마다 해당 명령어를 치는 것은 불편할 것입니다.\n따라서 리눅스 잡 스케줄러인 cron을 사용하여 원하는 날짜가 됐을때 자동으로 해당 명령어를 사용하게 합시다.\n아래 명령어로 스케줄러 설정 파일에 들어갈 수 있습니다.\n1 crontab -e 크론텝은 5개의 숫자와 예약 명령어로 한 줄씩 추가 할 수 있습니다.\n각 숫자는 순서대로 분, 시간, 일, 월, 요일(일요일=0)이며 *로 대체되면 그 부분은 상관없게 됩니다.\n1 0 0 2 * * /bin/bash -l -c \u0026#39;certbot renew --quiet\u0026#39; 즉 이렇게 하면 매월 2일마다 갱신작업을 실행합니다.\n1 service cron restart 후\n1 service cron status 로 제대로 동작중인지 확인할 수 있습니다. 만약 문제가 생겼고 해결이 안된다면\n1 crontab -r 로 cron을 초기화 시킬수 있습니다.\n아파치 설정 마지막으로 아파치에 적용하면 작업종료입니다.\n인증서 적용 먼저 모듈을 키고 수정할 사이트를 내려줍니다.\n1 2 a2enmod ssl a2dissite www.a.com 이제 사이트 설정 콘피그에 들어가 기본 HTTP포트 80으로 호스팅 되어있는 부분을 삭제하고 SSL포트 443번으로 수정시킨 후 아래 처럼 만들어줍니다. 경로에 주의해야 합니다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \u0026lt;VirtualHost *:443\u0026gt; ServerName www.a.com DocumentRoot /var/www/www.a.com SSLEngine on SSLCertificateKeyFile /etc/letsencrypt/live/www.a.com/privkey.pem SSLCertificateFile /etc/letsencrypt/live/www.a.com/cert.pem SSLCACertificateFile /etc/letsencrypt/live/www.a.com/fullchain.pem \u0026lt;Directory /\u0026gt; AllowOverride All Options All -Indexes Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;/VirtualHost\u0026gt; 저장 후\n1 2 a2ensite www.a.com service apache2 restart HTTP 접근시 대처 만약 서버측에서 HTTPS로 구현 했음에도 불구하고 유저가 HTTP로 접근한다면 접속 불가하게 만드는 것 보다 자동으로 HTTPS로 재접근 되게 만드는 것이 유저 친화적일 것입니다. 이런 기능을 Rewrite, Redirect라고 합니다. 모듈명은 Rewrite입니다.\nRewrite Redirect 서버 사이드 클라이언트 사이드 클라이언트 모르게 설정된 경로로 바뀜, URL을 숨기는 용도로도 사용가능 클라이언트측 브라우저가 설정된 경로로 재접근함 1 2 a2enmod rewrite a2dissite www.a.com 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \u0026lt;VirtualHost *:443\u0026gt; ServerName www.a.com DocumentRoot /var/www/www.a.com SSLEngine on SSLCertificateKeyFile /etc/letsencrypt/live/www.a.com/privkey.pem SSLCertificateFile /etc/letsencrypt/live/www.a.com/cert.pem SSLCACertificateFile /etc/letsencrypt/live/www.a.com/fullchain.pem \u0026lt;Directory /\u0026gt; AllowOverride All Options All -Indexes Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;/VirtualHost\u0026gt; \u0026lt;VirtualHost *:80\u0026gt; ServerName www.a.com Redirect / https://www.a.com \u0026lt;/VirtualHost\u0026gt; ","date":"2021-10-01T18:41:21+09:00","image":"https://docs.9bon.org/p/%EC%95%84%ED%8C%8C%EC%B9%98-ssl-%EC%A0%81%EC%9A%A9-lets-encrypt/thum_hu41c3bc7f4d7437a9085f5f36b9638c8f_31272_120x120_fill_box_smart1_3.png","permalink":"https://docs.9bon.org/p/%EC%95%84%ED%8C%8C%EC%B9%98-ssl-%EC%A0%81%EC%9A%A9-lets-encrypt/","title":"아파치 SSL 적용, Let's Encrypt"},{"content":"서론 웹 서버 데몬은 한 호스트를 여러 호스트처럼 쓸 수 있는 가상 호스트(VirtualHost) 를 대부분 지원하고 있습니다. 포트번호, 서브도메인, 출발지 주소등의 규칙을 적용시킵니다. 이번엔 Debian과 Apache로 서브 도메인에 따른 규칙으로 가상 호스트를 구현해 보도록 하겠습니다. 마지막엔 cloud.9bon.org와 9bon.org가 똑같은 장치에 구성되어있음에 불구하고 서로 다른 내용을 보여주는 것이 목표입니다.\n아파치 준비 아파치가 설치되어있지 않으면 패키지 관리자로 쉽게 설치 가능합니다.\n1 apt-get update \u0026amp;\u0026amp; apt-get install apache2 또한 앞으로의 과정 중 재시작을 하고 싶을땐 다음과 같습니다.\n1 service apache2 restart 당연히 재시작 말고도 start, stop, reload, status를 사용할 수 있습니다.\n아파치 설정 데비안 10기준 Apache2에서는 설정파일이 모두 모듈화 되어있으며 추가 설정 또한 부분화하길 권장하고 있습니다.\n1 cd /etc/apache2/sites-available/ 아래처럼 설정파일을 \u0026lt;추가할 사이트 도메인\u0026gt;.conf 으로 생성하면 됩니다.\n1 nano a.com.conf 1 2 3 4 5 6 7 8 9 10 \u0026lt;VirtualHost *:80\u0026gt; ServerName a.com DocumentRoot /var/www/a.com \u0026lt;Directory /\u0026gt; AllowOverride All Options All -Indexes Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;/VirtualHost\u0026gt; 요약하면 80번 포트로 연결되는 가상 호스트이며 도메인이 a.com일때 /var/www/a.com의 내용을 보여라는 뜻입니다. 그대로 www.a.com또한 작성하면 됩니다.\n1 nano www.a.com 1 2 3 4 5 6 7 8 9 10 \u0026lt;VirtualHost *:80\u0026gt; ServerName www.a.com DocumentRoot /var/www/www.a.com \u0026lt;Directory /\u0026gt; AllowOverride All Options All -Indexes Require all granted \u0026lt;/Directory\u0026gt; \u0026lt;/VirtualHost\u0026gt; 작성을 마치면\n1 2 a2ensite a.com a2ensite www.a.com 잘못 입력했다면\n1 a2dissite \u0026lt;설정 파일을 기반한 주소\u0026gt; 할 수 있습니다. 마지막으로 reload 하면 완료입니다.\n1 service apache2 reload 참고로 아파치는 사이트 설정을 바꾸는 것에는 reload를 모듈을 추가 해제할 때는 restart 하기를 추천하고 있습니다.\n","date":"2021-09-02T19:32:24+09:00","image":"https://docs.9bon.org/p/%EC%95%84%ED%8C%8C%EC%B9%98-%EA%B0%80%EC%83%81%ED%98%B8%EC%8A%A4%ED%8A%B8-%EC%84%A4%EC%A0%95/thum_hu93117a104f66c66e072a709f88188d19_37623_120x120_fill_box_smart1_3.png","permalink":"https://docs.9bon.org/p/%EC%95%84%ED%8C%8C%EC%B9%98-%EA%B0%80%EC%83%81%ED%98%B8%EC%8A%A4%ED%8A%B8-%EC%84%A4%EC%A0%95/","title":"아파치 가상호스트 설정"},{"content":"주의사항 2022.03.20 하드디스크가 문제가 생겼었고, 교환 받은 디스크도 종종 긁히는 소리가 갑자기 생기는데 Hugo를 직접 호스팅 하기 전까지 이런적은 없었습니다.\nhugo server 로 24시간 작동시키는것이 다른 문제가 있는지 의심하는 중입니다. 주의하시길 바랍니다.\n서론 학습했던 것들을 정리하기 위해 정적 페이지를 알아보다 HUGO와 Github page를 사용한 대중적인 게시글들을 확인할 수 있었습니다. Github page를 사용하면 관리하기 편리할 것 같지만 호스팅 경험을 위하여 예전부터 동작 중인 개인 서버를 통해 가동해 보겠습니다.\nHomebrew 설치 2021년 08월 29일 기준 데비안 10.10 버전의 apt 패키지 관리자에서는 최신 버전의 hugo를 지원하지 않고 있습니다. 사용하고 싶은 테마가 최신버전의 hugo에서만 지원하고 있기 때문에 수동으로 받아 설치하거나 다른 패키지 관리자를 사용하는 것이 방법일 것입니다. 여기서는 Mac OS 에서 주로 사용하는 Homebrew를 사용했습니다.\n1 2 sudo apt-get install build-essential curl file git sh -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)\u0026#34; 여기서 brew는 설치, 설치후 사용할 때 root의 권한으로 동작시킬 수 없습니다.\n설치가 완료되었다면 자기가 사용하는 쉘에 설치된 경로를 포함시켜야 합니다. 데비안 기준 기본 쉘은 bash입니다.\n1 nano ~/.bashrc 또는 사람들이 주로 사용하는 zsh는\n1 nano ~/.zshrc 를 사용해 아래를 추가해주고\n1 2 3 export PATH=\u0026#34;/home/linuxbrew/.linuxbrew/bin:$PATH\u0026#34; export MANPATH=\u0026#34;/home/linuxbrew/.linuxbrew/share/man:$MANPATH\u0026#34; export INFOPATH=\u0026#34;/home/linuxbrew/.linuxbrew/share/info:$INFOPATH\u0026#34; 저장 후 자신의 쉘에 맞게\n1 source ~/.bashrc 또는\n1 source ~/.zshrc 를 실행시켜 주면 적용되어 바로 사용 할 수 있습니다.\n만약 저처럼 알기 힘든 오류를 출력하여 진행 할 수 없을 때는 아래와 같은 방법으로 해결방법을 찾을 수 있습니다.\n1 brew doctor 저 같은 경우에는 해당 명령어를 추천했으며 올바르게 동작했습니다.\n1 rm -rf /usr/local/Cellar /usr/local/.git \u0026amp;\u0026amp; brew cleanup 모든 것이 완료되었다면 아래처럼 테스트 해볼 수 있습니다.\n1 2 3 4 brew update brew install hello hello brew remove hello HUGO 설치 및 실행 1 brew install hugo 후\n1 hugo version 하면 올바르게 최신 버전이 설치되었음을 확인 할 수 있습니다. 이후 원하는 디렉토리에 들어가 새로운 사이트를 생성하고\n1 hugo new site docs.9bon.org 원하는 테마를 받아 올 수 있습니다.\n1 2 cd themes https://github.com/CaiJimmy/hugo-theme-stack.git 시험삼아 간단한 테스트를 하기위해 설정파일을 조작할 것인데 기본으로 생기는 설정파일이 config.toml인것에 반해 제작자 가이드는 config.yaml에 맞추어져 있습니다. 편의상인 것으로 추측됩니다. 원래 있는 config.toml을 치우고 config.yaml을 만들어주면 yaml타입으로 설정할 수 있습니다.\n1 cd .. / mv ./config.toml ./__config.toml 나노 config.yaml 이후에 설정파일은 테마 제작자 깃허브 https://github.com/CaiJimmy/hugo-theme-stack 를 참고하여 작성 했습니다.\n작성이 완료되었다면 해당 명령어로 로컬 서버를 동작시켜 사이트 테스트를 할 수 있습니다.\n1 hugo server 하지만 /tmp/hugo_cache/ 쪽에서 권한 문제가 생겼다는 에러를 확인할 수 있었습니다. 또한 brew로 설치한 hugo는 root에 존재하지 않기 때문에 root권한으로 실행할 수 없습니다. 따라서 해당 디렉토리 이하의 권한을 user권한으로 맞춰 줄 필요가 있습니다. 이 작업은 당연히 보안상에 문제가 없는지 검토가 이루어져야 합니다.\n1 sudo chown -R \u0026lt; 사용자 이름 \u0026gt; : \u0026lt; 사용자 이름 \u0026gt; /tmp/hugo_cache/ 위의 작업까지 완료하고 작성한 포스트를 작성 후 함께 Github에 올리고 뿌리기 전용 저장소까지 완성하면 git page로 호스팅이 가능합니다. 방법은 쉽게 인터넷에서 찾아볼 수 있습니다.\nhugo server 상세 명령어 hugo server를 외부에 제한없이 오픈하려면 다음과 같은 명령어를 사용해야 합니다.\n1 hugo server --baseURL \u0026#34;docs.9bon.org\u0026#34; --bind \u0026#34;0.0.0.0\u0026#34; 이때 baseURL을 추가하지 않으면 config.yaml에 따라 적용되는 것으로 보였습니다. hugo server의 기본 포트는 1313이기에 docs.9bon.org:1313으로 활성화 됩니다.\n만약 포트번호를 바꾸고 싶다면\n1 hugo server --port 2222 --baseURL \u0026#34;docs.9bon.org\u0026#34; --bind \u0026#34;0.0.0.0\u0026#34; 와 같은 방법으로 포트 번호를 바꿀 수 있습니다.\n만약 저처럼 해당 장치에 웹서버가 동작하고 있어 80포트는 사용할 수 없지만 URL에 포트번호가 찍혀 접속하는 것도 흉해서 싫다면 웹서버의 프록시를 사용해야 합니다. 프록시의 구축은 이후에 설명하겠습니다.\n만약 장치에 리버스 프록시가 적용된 웹서버가 존재하기 때문에 클라이언트는 접속을 80포트로 진행하게 될 예정이지만, 서버 내에선 다른 포트로 동작해야 한다면 명령어에 오픈 주소와 포트를 붙이지 말라는 내용을 추가해야 합니다.\n1 hugo server --port 2222 --appendPort=false --baseURL \u0026#34;docs.9bon.org\u0026#34; --bind \u0026#34;0.0.0.0\u0026#34; 이렇게 하고 웹서버의 설정도 맞춘다면 서버 내에선 2222포트로 동작하며 클라이언트는 80포트가 생략된 docs.9bon.org의 주소로 접속해야만 합니다.\n","date":"2021-09-01T14:21:27+10:23","image":"https://docs.9bon.org/p/%ED%9C%B4%EA%B3%A0-%EC%84%9C%EB%B2%84%EC%97%90-%EC%A7%81%EC%A0%91-%EA%B5%AC%EB%8F%99%EC%8B%9C%ED%82%A4%EA%B8%B0/thum_hu7cac0fe55803f0cb8ffe35f84687974b_19812_120x120_fill_box_smart1_3.png","permalink":"https://docs.9bon.org/p/%ED%9C%B4%EA%B3%A0-%EC%84%9C%EB%B2%84%EC%97%90-%EC%A7%81%EC%A0%91-%EA%B5%AC%EB%8F%99%EC%8B%9C%ED%82%A4%EA%B8%B0/","title":"휴고 서버에 직접 구동시키기"}]